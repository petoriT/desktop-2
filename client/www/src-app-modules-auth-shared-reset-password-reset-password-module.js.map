{"version":3,"sources":["./src/app/modules/auth/shared/reset-password/reset-password.page.html","./src/app/modules/auth/shared/reset-password/reset-password.module.ts","./src/app/modules/auth/shared/reset-password/reset-password.page.scss","./src/app/modules/auth/shared/reset-password/reset-password.page.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAe,o+CAAq6C,gCAAgC,uBAAuB,E;;;;;;;;;;;;;;;;;;;;;;ACAl8C;AACM;AACF;AACU;AAEV;AAEa;AAEN;AAGpD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,sEAAiB;KAC7B;CACF,CAAC;AAYF;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QAVnC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAC7B,kEAAmB;aACpB;YACD,YAAY,EAAE,CAAC,sEAAiB,CAAC;SAClC,CAAC;OACW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;;;;;AC7BpC;AAAe,6GAA8C,uLAAuL,E;;;;;;;;;;;;;;;;;;;;;ACAlM;AAC4C;AAErC;AACwB;AACb;AAOpE;IAOE,2BACU,YAA4B,EAC5B,MAAc,EACd,cAA8B,EAC9B,WAAwB;QAHxB,iBAAY,GAAZ,YAAY,CAAgB;QAC5B,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;QAC9B,gBAAW,GAAX,WAAW,CAAa;IAC9B,CAAC;IAEH,oCAAQ,GAAR;QAAA,iBAgBC;QAfC,sCAAsC;QACtC,IAAI,CAAC,cAAc,CAAC,WAAW,CAAC,SAAS,CACvC,gBAAM;YACJ,KAAI,CAAC,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAC3B,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC;QAClC,CAAC,CACF;QACD,gCAAgC;QAChC,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YAC9C,kCAAkC;YAClC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YACxC,KAAK,EAAE,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,yDAAU,CAAC,QAAQ,CAAC,CAAC;YAC9C,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAC,yDAAU,CAAC,QAAQ,EAAE,yDAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAE,CAAC;YAC/D,eAAe,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAC3C,EAAE,EAAC,SAAS,EAAE,4EAAiB,EAAC,CAAC,CAAC;IACrC,CAAC;IAED,oCAAQ,GAAR;QAAA,iBASC;QARC,iDAAiD;QACjD,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,SAAS,CACnE,kBAAQ;YACN,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;YACvB,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE,EAAC,KAAK,EAAE,EAAC,IAAI,EAAE,QAAQ,CAAC,OAAO,EAAC,EAAC,CAAC,CAAC;QACzE,CAAC,EACD,eAAK,IAAI,cAAO,CAAC,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,EAA7B,CAA6B,CACvC;IACL,CAAC;;gBAjCqB,2GAAc;gBACpB,sDAAM;gBACE,8DAAc;gBACjB,0DAAW;;IAXvB,iBAAiB;QAL7B,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;YAC9B,gQAAyC;;SAE1C,CAAC;uFASwB,2GAAc;YACpB,sDAAM;YACE,8DAAc;YACjB,0DAAW;OAXvB,iBAAiB,CA2C7B;IAAD,wBAAC;CAAA;AA3C6B","file":"src-app-modules-auth-shared-reset-password-reset-password-module.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>reset-password</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n  <form [formGroup]=\\\"resetPasswordForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n    <ion-item>\\r\\n      <ion-input formControlName=\\\"id\\\" type=\\\"hidden\\\"></ion-input>\\r\\n      <ion-input formControlName=\\\"token\\\" type=\\\"hidden\\\"></ion-input>\\r\\n    </ion-item>\\r\\n    <ion-item>\\r\\n      <ion-input formControlName=\\\"password\\\" type=\\\"password\\\" placeholder=\\\"Password\\\"></ion-input>\\r\\n      <div *ngIf=\\\"resetPasswordForm.get('password').invalid && resetPasswordForm.get('password').touched\\\">\\r\\n        <ion-text *ngIf=\\\"resetPasswordForm.get('password').errors?.required\\\" color=\\\"danger\\\"><sub>Password is required</sub></ion-text>\\r\\n        <ion-text *ngIf=\\\"resetPasswordForm.get('password').errors?.minlength\\\" color=\\\"danger\\\"><sub>Password must be at least 6 Characters</sub></ion-text>\\r\\n      </div>\\r\\n    </ion-item>\\r\\n    <ion-item>\\r\\n      <ion-input [class.is-invalid]=\\\"resetPasswordForm.errors?.misMatch\\\" formControlName=\\\"confirmPassword\\\" type=\\\"password\\\" placeholder=\\\"Confirm Password\\\"></ion-input>\\r\\n      <ion-text *ngIf=\\\"resetPasswordForm.errors?.misMatch\\\" color=\\\"danger\\\"><sub>Passwords do not match</sub></ion-text>\\r\\n    </ion-item>\\r\\n    <ion-button [disabled]=\\\"!resetPasswordForm.valid\\\"  type=\\\"submit\\\" color=\\\"primary\\\" >Submit</ion-button>\\r\\n  </form>\\r\\n  {{resetPasswordForm.value | json}}\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\nimport { ReactiveFormsModule} from '@angular/forms';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    RouterModule.forChild(routes),\r\n    ReactiveFormsModule,\r\n  ],\r\n  declarations: [ResetPasswordPage]\r\n})\r\nexport class ResetPasswordPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21vZHVsZXMvYXV0aC9zaGFyZWQvcmVzZXQtcGFzc3dvcmQvcmVzZXQtcGFzc3dvcmQucGFnZS5zY3NzIn0= */\";","import { Component, OnInit } from '@angular/core';\r\nimport { AuthApiService } from 'src/app/core-modules/services/auth/auth-api/auth-api.service';\r\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms';\r\nimport { PasswordValidator } from '../../shared/password.validator';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.page.html',\r\n  styleUrls: ['./reset-password.page.scss'],\r\n})\r\nexport class ResetPasswordPage implements OnInit {\r\n\r\n  initId: string;\r\n  initToken: string;\r\n\r\n  private resetPasswordForm : FormGroup\r\n\r\n  constructor(\r\n    private _authService: AuthApiService, \r\n    private router: Router,\r\n    private activatedRoute: ActivatedRoute,\r\n    private formBuilder: FormBuilder\r\n  ) { }\r\n\r\n    ngOnInit() {\r\n      //get params from backend query string\r\n      this.activatedRoute.queryParams.subscribe(\r\n        params => {\r\n          this.initId = params['id'];\r\n          this.initToken = params['token']\r\n        }\r\n      )\r\n      //create new form-group instance\r\n      this.resetPasswordForm = this.formBuilder.group({\r\n        //create instances of form-control\r\n        id: [this.initId, [Validators.required]],\r\n        token: [this.initToken, [Validators.required]],\r\n        password: ['', [Validators.required, Validators.minLength(6) ]],\r\n        confirmPassword: ['', Validators.required],\r\n      }, {validator: PasswordValidator});\r\n    }\r\n\r\n    onSubmit(){\r\n      //register to service and subscribe to observable\r\n      this._authService.resetPassword(this.resetPasswordForm.value).subscribe(\r\n          response => {\r\n            console.log(response)\r\n          this.router.navigate(['/user/login'], {state: {data: response.message}});\r\n          },\r\n          error => console.error('Error', error)\r\n        )\r\n    }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}