import { Injectable } from "@angular/core";
import { VoucherApiService } from "src/app/core-modules/services/vouchers/voucher-api/voucher-api.service";
import { VoucherStateService } from "src/app/core-modules/services/vouchers/voucher-state/voucher-state.service";

@Injectable({
  providedIn: "root",
})
export class VoucherFacadeService {
  constructor(
    private voucherApi: VoucherApiService,
    private voucherState: VoucherStateService
  ) {}

  isUpdating$() {
    return this.voucherState.isUpdating$();
  }

  resetVouchers() {
    return this.voucherState.resetVouchers();
  }

  getVouchersLength() {
    return this.voucherState.getVouchersLength$();
  }

  getStoreVouchers() {
    return this.voucherState.getStoreVouchers();
  }

  getStoreVouchers$() {
    // here we just pass the state without any projections
    // it may happen that it is necessary to combine two or more streams and expose to the components
    return this.voucherState.getVouchers$();
  }

  loadStoreVouchers() {
    this.voucherState.setUpdating(true);

    this.voucherApi.getStoreVouchers().subscribe(
      (res) => {
        let vouchers = res.vouchers;

        let array_length = vouchers.length;
        this.voucherState.setVouchers(vouchers, array_length);
      },
      (err) => {
        console.log(err);
      },
      () => this.voucherState.setUpdating(false)
    );
  }

  loadStoreVouchersById(id) {
    this.voucherState.setUpdating(true);

    this.voucherApi.getStoreVouchersById(id).subscribe(
      (res) => {
        console.log(res);
        let vouchers = res.vouchers;
        let array_length = vouchers.length;
        this.voucherState.setVouchers(vouchers, array_length);
      },
      (err) => {
        console.log(err);
      },
      () => this.voucherState.setUpdating(false)
    );
  }

  // update voucher optimistic way
  updateStoreVoucher(data) {
    this.voucherState.setUpdating(true);
    //update voucher state
    this.voucherState.updateVoucher(data);

    //update database voucher item status
    this.voucherApi.updateVoucher(data).subscribe(
      (res) => {
        console.log("item updated");
      },
      (err) => {
        //we need to rollback
        console.log(err);
      },
      () => this.voucherState.setUpdating(false)
    );
  }

  createVoucher(voucher) {
    this.voucherState.setUpdating(true);
    this.voucherApi.createVoucher(voucher).subscribe(
      (res) => {
        let new_voucher = res.voucher;
        // success callback - we have voucher generated by the server, let's update the state
        this.voucherState.addVoucher(new_voucher);
      },
      (error) => {
        console.log(error);
      },
      () => this.voucherState.setUpdating(false)
    );
  }

  removeStoreVoucher(voucher) {
    //change the state
    this.voucherState.removeVoucher(voucher);
    //update database
    let id = { id: voucher._id };
  }

  /****voucher products user handle****/

  getVouchersProducts() {
    return this.voucherState.getVouchersProducts$();
  }

  loadVouchers() {
    this.voucherState.setUpdating(true);

    this.voucherApi.getAllVouchers().subscribe(
      (res) => {
        let promos = res.vouchers;
        for (let promo of promos) {
          for (let p of promo.products) {
            let type = promo.type;
            let discount = p.discount;
            let product = p.prod;
            let items_exceeding = p.items_exceeding;
            let quota = p.p_quota;
            let secondary_product = p.s_pro;
            let modified_price;
            let product_bind;

            switch (type) {
              case "itemDiscount":
                modified_price = product.productPrice - discount;
                this.modifyProduct(
                  null,
                  product,
                  modified_price,
                  product.amount,
                  type,
                  null,
                  null
                );
                break;

              case "buy1get1free":
                this.modifyProduct(
                  null,
                  product,
                  product.productPrice,
                  product.amount,
                  type,
                  null,
                  null
                );
                break;

              case "volume":
                let sub_total =
                  product.productPrice * items_exceeding - discount;
                let new_item_price = sub_total / items_exceeding;
                this.modifyProduct(
                  null,
                  product,
                  new_item_price,
                  items_exceeding,
                  type,
                  null,
                  null
                );
                break;

              case "combo":
                product_bind = [product._id, secondary_product._id];

                modified_price = secondary_product.productPrice - discount;

                //minify this script
                let secondary_product_b = {
                  amount: secondary_product.amount,
                  category: secondary_product.category,
                  productDescription: secondary_product.productDescription,
                  productImage: secondary_product.productImage,
                  productName: secondary_product.productName,
                  productPrice: modified_price,
                  original_price: secondary_product.productPrice,
                  storeId: secondary_product.stosreId,
                  sale: secondary_product.sale,
                  sale_type: secondary_product.sale_type,
                  product_bind: product_bind,
                  promo_kind: type,
                  thresh: secondary_product.amount,
                  _id: secondary_product._id,
                };
                this.modifyProduct(
                  null,
                  product,
                  product.productPrice,
                  product.amount,
                  type,
                  product_bind,
                  secondary_product_b
                );
                this.modifyProduct(
                  true,
                  secondary_product,
                  secondary_product_b.productPrice,
                  secondary_product.amount,
                  type,
                  product_bind,
                  null
                );
                break;
            }
          }
        }
      },
      (err) => {
        console.log(err);
      }
    );
  }

  //modify the products and convert to voucher prices
  modifyProduct(
    sec,
    product,
    modified_price,
    amount,
    promo_kind,
    product_bind,
    secondary_product
  ) {
    let mProduct = {
      sec: sec,
      amount: amount,
      category: product.category,
      productDescription: product.productDescription,
      productImage: product.productImage,
      productName: product.productName,
      productPrice: modified_price,
      original_price: product.productPrice,
      storeId: product.storeId,
      sale: true,
      sale_type: promo_kind,
      product_bind: product_bind,
      promo_kind: promo_kind,
      secondary_product: secondary_product,
      thresh: amount,
      _id: product._id,
    };
    this.voucherState.setVouchersProducts(mProduct);
  }
}
