import { Injectable } from "@angular/core";
import { CategoryApiService } from "src/app/core-modules/services/categories/category-api/category-api.service";
import { CategoryStateService } from "src/app/core-modules/services/categories/category-state/category-state.service";
import { Observable } from "rxjs";

@Injectable({
  providedIn: "root",
})
export class CategoryFacadeService {
  constructor(
    private categoryApi: CategoryApiService,
    private categoryState: CategoryStateService
  ) {}

  isUpdating$() {
    return this.categoryState.isUpdating$();
  }

  getCategories$() {
    // here we just pass the state without any projections
    // it may happen that it is necessary to combine two or more streams and expose to the components
    return this.categoryState.getCategories$();
  }

  loadCategories() {
    this.categoryState.setUpdating(true);

    this.categoryApi.getCategories().subscribe(
      (res) => {
        let categories = res.category;
        this.categoryState.setCategories(categories);
        this.categoryState.setUpdating(false);
      },
      (err) => {
        console.log(err);
      },
      () => this.categoryState.setUpdating(false)
    );
  }

  uploadBulkCategories(bulk) {
    this.categoryApi.loadBulk(bulk);
  }

  // optimistic update
  // 1. update UI state
  // 2. call API
  addCategory(category) {
    this.categoryState.setUpdating(true);
    this.categoryState.addCategory(category);
    this.categoryApi.createCategory(category).subscribe(
      (res) => {
        let new_category = res.category;
        // success callback - we have category generated by the server, let's update the state
        this.categoryState.updateCategory(new_category);
      },
      (error) => {
        // error callback - we need to rollback the state change
        this.categoryState.removeCategory(category);
      },
      () => this.categoryState.setUpdating(false)
    );
  }

  // pessimistic update
  // 1. call API
  // 2. update UI state
  updateCategory(category) {
    this.categoryState.setUpdating(true);
    this.categoryApi.updateCategory(category).subscribe(
      () => this.categoryState.updateCategory(category),
      (error) => console.log(error),
      () => this.categoryState.setUpdating(false)
    );
  }

  removeCategory(category) {
    //change the state
    this.categoryState.removeCategory(category);
    //update database
    let id = { id: category._id };
    this.categoryApi.deleteCategory(id).subscribe(
      (res) => {
        console.log(res);
      },
      (err) => {
        //on err roll back
        this.categoryState.addCategory(category);
      }
    );
  }
}
